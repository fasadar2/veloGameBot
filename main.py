import telebot
from telebot.types import  KeyboardButton, ReplyKeyboardMarkup
import time
from repos.UserRepository import *
from repos.ResultsRepository import *
from methods.get_values import try_parse_to_float_value
from methods.logger_to_file import logger_to_file
time_start = time.time()
bot = telebot.TeleBot("6752533782:AAFz0C-ZwQrZhavc_8_oxcCHuXRIibFFpKY")


def start_markup():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = KeyboardButton('üëÄ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
    btn2 = KeyboardButton('‚úã–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', )
    btn3 = KeyboardButton('üëë–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', )
    btn4 = KeyboardButton('‚ùì –°–∫–æ–ª—å–∫–æ —è —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ —Å–±–æ–µ–≤')
    markup.add(btn1, btn2, btn3,btn4)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–π—Ç–∞–Ω –±–æ—Ç',
                     reply_markup=start_markup())


def get_speed(message):
    try:
        speed = try_parse_to_float_value(message.text)
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é:")
        bot.register_next_step_handler(message, get_distance, speed)
    except ValueError:
        bot.send_message(message.chat.id, "–ñ—É–ª–∏–∫, –Ω–µ –ª–æ–º–∞–π, –∞ —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞")
        logger_to_file(message.from_user.first_name+" break speed")


def get_distance(message, speed):
    try:
        distance = try_parse_to_float_value(message.text)
        user = get_or_create_user(message.from_user.id, message.from_user.first_name)
        if user is None:
            raise ConnectionRefusedError
        results = save_results(user, speed, distance)
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–ª –¥–ª—è {results.user_id}, {results.max_speed} {results.distance}")
    except ValueError:
        bot.send_message(message.chat.id, "–ñ—É–ª–∏–∫, –Ω–µ –ª–æ–º–∞–π, –∞ —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞")
        logger_to_file(message.from_user.first_name+" break distance")
    except ConnectionRefusedError:
        bot.send_message(message.chat.id, "–° –≤–∞–º–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—É —Å –Ω–∞–¥–ø–∏—Å—å—é '—Ö–ª–µ–±' –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è")
        logger_to_file(message.from_user.first_name+" break user")
@bot.message_handler(content_types=['text'])
def text_handler(message):
    match message.text:
        case 'üëÄ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç':
            bot.send_message(message.chat.id, f'–ê–≥–∞ –º–æ–ª–¥–æ–µ—Ü, –∞ —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–≤–µ–¥–∏')
            bot.register_next_step_handler(message, get_speed)
        case '‚úã–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
            message_text = get_all_results()
            bot.send_message(message.chat.id,message_text)
        case 'üëë–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
            user = get_or_create_user(message.from_user.id, message.from_user.first_name)
            if user is None:
                raise ConnectionRefusedError
            message_text = get_results_for_user(user)
            bot.send_message(message.chat.id, message_text)
        case '‚ùì –°–∫–æ–ª—å–∫–æ —è —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ —Å–±–æ–µ–≤':
            time_now = time.time()
            bot.send_message(message.chat.id, f"{int(time_now - time_start)} —Å–µ–∫—É–Ω–¥")
        case _:
            bot.send_message(message.chat.id, f'–¢—ã –ø–æ–µ—Ö–∞–≤—à–∏–π ? –Ø —Ç–µ–±—è –ø—Ä–æ—Å–∏–ª {message.text} –≤–≤–æ–¥–∏—Ç—å ?')



if __name__ == '__main__':
    print("–ó–∞–ø—É—Å—Ç–∏–ª –≤ –∫–æ—Ç–∞ –ø–∏–ø–∏—Å–∫–æ–π")
    bot.infinity_polling(none_stop=True)
